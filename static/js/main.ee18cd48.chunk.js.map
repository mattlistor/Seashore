{"version":3,"sources":["icons/icon-01.png","icons/icon-02.png","icons/icon-03.png","icons/icon-04.png","icons/waves5.svg","WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","WeatherCard","state","sunrise","sunset","componentDidMount","city","props","fetch","then","res","json","myJson","Date","sys","setState","toLocaleTimeString","toLowerCase","weather","main","wind","speed","temp","Math","trunc","console","log","className","this","toString","src","icon1","alt","icon2","icon3","icon4","React","Component","App","date","toDateString","cityList","handleChange","event","target","value","handleSubmit","preventDefault","status","camelCase","renderWeatherCards","map","i","key","str","onSubmit","type","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee18cd48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-01.3b7bf8ef.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-02.87aeb5ee.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-03.d416d8a9.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-04.644ff712.png\";","module.exports = __webpack_public_path__ + \"static/media/waves5.7fd0579d.svg\";","import React from 'react';\nimport './App.css';\nimport icon1 from './icons/icon-01.png';\nimport icon2 from './icons/icon-02.png';\nimport icon3 from './icons/icon-03.png';\nimport icon4 from './icons/icon-04.png';\n// import icon5 from './icons/icon-05.png';\n// import icon6 from './icons/icon-06.png';\n// import icon7 from './icons/icon-07.png';\n// import icon8 from './icons/icon-08.png';\n\n// const API_KEY = \"8e520974bcb3c5c57b2b1233edd5b9db\"\nconst API_KEY = \"a6e9b836325e9e176bab11492e484b9f\"\n\nclass WeatherCard extends React.Component  {\n\n  state = {\n    sunrise: \"\",\n    sunset: \"\",\n  }\n\n  componentDidMount = () => {\n    const city = this.props.city\n    const country = \"us\"\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`)\n    .then(res => res.json())\n    .then((myJson) => {\n        let sunrise = new Date(myJson.sys.sunrise * 1000)\n        let sunset = new Date(myJson.sys.sunset * 1000)\n\n        this.setState({ \n            sunrise: sunrise.toLocaleTimeString().toLowerCase(),\n            sunset: sunset.toLocaleTimeString().toLowerCase(),\n            weather: myJson.weather[0].main,\n            // weather: myJson.coord.lon + \", \" + myJson.coord.lat,\n            wind: myJson.wind.speed + \" mph\",\n            temp: Math.trunc(myJson.main.temp) + \"° F\"\n        })\n    })\n    console.log(\"API call :: fetch\")\n  }\n  \n  render(){\n\n    // https://www.engine.xyz/\n\n    return (\n      <div className=\"WeatherCard\">\n          {this.state.sunrise === \"\" ? \n\n            <>\n                <h3 className=\"City\">{this.props.city.toString()}</h3>\n\n                {/* <div className=\"Sky\">{this.state.weather}</div> */}\n\n                {/* <div className=\"WeatherCardRow\">\n                    <div className='Sunrise Tile'>\n                        <img className=\"Icon\" src={\"https://i.imgur.com/ptdvwYH.gif\"}></img>\n                        <div>Loading...</div>\n                    </div>\n\n                    <div className='Sunset Tile'>\n                        <img className=\"Icon\" src={\"https://i.imgur.com/ptdvwYH.gif\"}></img>\n                        <div>Loading...</div>\n                    </div>\n                </div>\n\n                <div className=\"WeatherCardRow\">\n                    <div className='Wind Tile'>\n                        <img className=\"Icon\" src={\"https://i.imgur.com/ptdvwYH.gif\"}></img>\n                        <div>Loading...</div>\n                    </div>\n\n                    <div className='Temp Tile'>\n                        <img className=\"Icon\" src={\"https://i.imgur.com/ptdvwYH.gif\"}></img>\n                        <div>Loading...</div>\n                    </div>\n                </div> */}\n\n            </>\n            // <>\n            //     <h3>{this.props.city}</h3>\n            //     {/* Loading graphic */}\n            //     <img src=\"https://i.imgur.com/ptdvwYH.gif\" width=\"100px\"></img>\n            // </>\n            :\n            <>\n                <h3 className=\"City\">{this.props.city.toString()}</h3>\n\n                {/* <div className=\"Sky\">{this.state.weather}</div> */}\n                \n                <div className=\"WeatherCardRow\">\n                    <div className='Sunrise Tile'>\n                        <img className=\"Icon\" src={icon1} alt={\"\"}></img>\n                        <div>{this.state.sunrise}</div>\n                    </div>\n\n                    <div className='Sunset Tile'>\n                        <img className=\"Icon\" src={icon2} alt={\"\"}></img>\n                        <div>{this.state.sunset}</div>\n                    </div>\n                </div>\n\n                <div className=\"WeatherCardRow\">\n                    <div className='Wind Tile'>\n                        <img className=\"Icon\" src={icon3} alt={\"\"}></img>\n                        <div>{this.state.wind}</div>\n                    </div>\n\n                    <div className='Temp Tile'>\n                        <img className=\"Icon\" src={icon4} alt={\"\"}></img>\n                        <div>{this.state.temp}</div>\n                    </div>\n                </div>\n                \n            </>\n          }\n      </div>\n    )\n  }\n}\n\nexport default WeatherCard;\n","import React from 'react';\nimport WeatherCard from './WeatherCard.js';\n// import logo from './logo.svg';\n// import styles from './App.css';\nimport waves from './icons/waves5.svg';\n// import sun from './icons/sun.svg';\n\nconst API_KEY = \"a6e9b836325e9e176bab11492e484b9f\"\n\nclass App extends React.Component  {\n  state = {\n    city: \"\",\n    date: new Date().toDateString(),\n    cityList: [\"Sea Bright\", \"Asbury Park\", \"Barnegat\"]\n  }\n\n  handleChange = (event) => {\n    this.setState({city: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city},us&appid=${API_KEY}&units=imperial`)\n    .then((res) => {\n      if(res.status === 200) {\n        this.setState({cityList: [...this.state.cityList, this.camelCase(this.state.city)]})\n      }\n    })    \n  }\n  \n  renderWeatherCards = () => {\n    return this.state.cityList.map((city, i) => <WeatherCard key={i} city={city}/>)\n  }\n\n  camelCase = (str) => { \n    return str.toLowerCase()\n  } \n  \n  render(){\n    return (\n      <div className='App'>\n        <div className='Main'>\n          <div className='FirstColumn'>\n            \n            <div className='SeaShore'>\n              <span className='sea'>SEA</span>\n              <span className='shore'>SHORE</span> \n            </div>\n          \n            <div className='Date'>\n              {this.state.date}\n            </div>\n\n            <form onSubmit={this.handleSubmit}>\n              <input type=\"text\" \n              value={this.state.value} \n              onChange={this.handleChange} \n              placeholder=\"Enter City...\" />\n              <input type=\"submit\" value=\"⭢\" />\n            </form>\n          \n          </div>\n\n        {/* <img className=\"Waves\" src={waves} alt={\"\"}></img> */}\n        {/* <img className=\"Sun\" src={sun}></img> */}\n\n        {/* <div className='Main'> */}\n\n\n          <div className=\"WeatherCardContainer wrap\">\n            {this.renderWeatherCards()}\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}